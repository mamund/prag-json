= The PRAG-JSON Media Type (Pragmatic Representation of Application Grammars)
:author: Mike Amundsen
:email: mca@amundsen.com
:toc: 

== Status
Doc Status:: 
  *[white red-background]#Working Draft#* -- _Only experimental and `proof-of-concept' apps should be built on this unstable draft._
Proposed IANA Registrations::
  +application/vnd.prag+json+
Repository::
  https://github.com/mamund/prag-json
Sample Implementation::
  NA
Last Updated::
  {docdate}

== Summary
This document describes a simple media type designed to make it easy to render and parse hypermedia-aware representations. The format was designed for the book "Design and Build Great Web APIs" (<<dabgwa, [DABGWA]>>).

=== Motivation
Hypermedia-aware formats like <<html5, [HTML5]>> are one of teh key reasons the Web become so widespread so quickly. It tapped into the ability to link documents together quickly and easily without much ceremony or egineering skills. *PRAG-JSON* was designed to mimic the low-barrier of entry and high usability found in HTML.

*PRAG-JSON* was designed to compliment the book "Design and Build Great Web APIs' (<<dabgwa, [DABGWA]>>). This book is a collection of lessons and common practices aimed to help the reader through the processs of creating hypermedia-style APIs quickly and easily. 

It is hoped that *PRAG-JSON* will show how easy it is to create and use an application-level computer messaging format that supports a high degree of loose coupling and extreme late binding (<<kay2003, [KAY2003]>>). 

=== Updates
There is an open source repository <<repo,[REPO]>> for this specification. Readers are encouraged to submit updates via the repository any time.

=== Compliance
An implementation (client or server) of this specification is not compliant if it fails to satisfy one or more of the MUST or REQUIRED elements. An implementation that satisfies all the MUST and REQUIRED elements as well as all the SHOULD and RECOMMENDED elements is said to be "unconditionally compliant"; one that satisfies all the MUST and REQUIRED elements but not all the SHOULD and RECOMMENDED elements is said to be "conditionally compliant."

[NOTE]
.RFC2119 Words
====
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", 
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be 
interpreted as described in <<rfc2119,[RFC2119]>>.
====

== The PRAG-JSON Media Type
The *PRAG-JSON* media type is a simple JSON <<rfc7159,[RFC7159]>> document that contains runtime status information about network resources on the Web. *PRAG-JSON* has three root elements;

 * +metadata+ : Contains an array of message metadata
 * +links+ : Contains an array of simple web links and rich forms for navigating the application space and modifying it's state
 * +items+ : Contains an array of data items. The +items+ collection represents the data associated with the network resource.

This media type can be used to provide dynamic representations of application state at runtime.

=== Example PRAG-JSON document
Here is a simple *PRAG-JSON* document example:

.Example *PRAG-JSON* document.
----
{
  "metadata" : [ 
    {"name" : "title", "value" : "BigCo Onboarding"},
    {"name" : "author", "value" : "Mike Amundsen"},
    {"name" : "updated", "value" : "2020-03-01"} 
  ],
  "links" : [ 
    {
      "id" : "q1w2e",
      "name" : "home",
      "href" : "http://api.example.org/",
      "title" : "Home Page",
      "method" : "GET",
      "properties" : [ 
        {"name" : "filter", "value" : ""} 
      ]
    } 
  ],
  "items" : [ 
    {
      links : [
        {
          "id" : "q1w2e3r4"
          "name" : "item",
          "href" : "http://api.example.org/q1w2e3r4",
          "title" : "Read Item",
          "method" : "GET",
          "properties": []
        }
      ],
      "wipIdentifier" : "q1w2e3r4",
      "customerIdentifier" : "w2e3r4t5",
      "accountIdentifier" : "e3r4t5y6",
      "activityIdentifier" : "r4t5y6u7",
      "givenName" : "Idara",
      "familyName" : "Adams",
      "email" : "idara.adams@example.org",
      "telephone" : "123.456.7890",
      "status" : "pending",
      "maxValue" : "5000",
      "discount" : "10"
    } 
  ]
}
----

== Elements of a PRAG-JSON Document
All *PRAG-JSON* documents MUST be valid JSON documents. A well-formed *PRAG-JSON* document has three top-level objects: +metadata+, +links+ and +items+. The following is a summary of the structure of the *PRAG-JSON* media type.

=== The +metadata+ Element
The +metadata+ element is meant to hold message-level information _about_ the payload of the response. This might be individual data properities that describe the payload, references to other related content, etc. Anything that might be needed in order to improve the understanding of the payload itself. The role played by the +metadata+ element in *PRAG-JSON* is similar to the role played by the +meta+ tag in HTML5 (<<html5-tag, [HTML5-TAG]>>).

The +metadata+ element is an array of anonymous JSON objects. The default properties of +metadata+ objects that SHOULD appear are +name+ and +value+. Possible addtional properties that MAY be part of a +metadata+ object include: +id+, +type+, +title+, +tags+, +href+ and others. Other properties not defined by this specification MAY appear as well.

.Sample +metadata+ object
----
{
  "name" : "".
  "value" : "",
  "id" : "",
  "type" : "",
  "title" : "",
  "tags" : "",
  "href" : ""
}
----

The +metadata+ element SHOULD NOT contain any +link+ or +item+ elements as they are meant to appear in their own collection.

=== The +links+ Element
The +links+ element contains any links and/or forms associated with the *PRAG-JSON* document.  The +links+ collection is an array of anonymous JSON +link+ objects. These +link+ objects are designed to carry complete deatils on Web navigation between resources including any protocol methods, arguments, and so forth. Any time the message needs to render a navigation or state change, this should appear as a +link+ object in the +links+ collection. The +links+ object plays a role in *PRAG-JSON* similar to HTML5's +link+ (<<html5-link,HTML5-LINK>>), +a+ (<<html5-a, HTML5-A>>), and +form+ (<<html5-form, HTML5-FORM>>) tags.

The default properties of a +link+ object that SHOULD appear are: +name+, +href+, +method+, and +properties+. Additional properties that MAY appear are: +id+, +title+, +type+, +rel+, +tags+, +type+, and +enctype+. Other properties not defined by this specification MAY appear as well.

.Sample +link+ object
----
{
  "id" : "".
  "name" : "",
  "href" : "",
  "title" : "",
  "type" : "".
  "rel" : "",
  "tags" : "",
  "enctype" : "",
  "method" : "",
  "properties" : [
    {"name" : "", "value" : ""}
  ]
}
----

The +properties+ array within a +link+ object contains one or more anonymous +property+ objects. A +property+ object SHOULD have +name+ and +value+ properties. It MAY have additional properties including +id+, +title+, +required+, +readonly+, +minlength+, +pattern+, +type+, and +tags+. Other properties not defined by this specification MAY appear as well. The role the +property+ object plays in *PRAG-JSON* is similar HTML5's +input+ (<<html5-input, HTML5-INPUT>>) element.

.Sample +property+ object
----
{
  "id", : "",
  "name" : "",
  "value" : "",
  "title" : "",
  "required" : "[true|false]",
  "readonly" : "[true|false]",
  "pattern" : "",
  "type" : "",  
  "tags" : ""
}
----

The +links+ element SHOULD NOT contain any +metadata or +item+ elements as they are meant to appear in their own collection.


////
+link+::
  The +link+ element consists of a key and a set of properties. 
  +
  * +href+ : The URL associated with the +key+. This is a REQUIRED element. If this is missing, set to empty or unparsable, the associated +link+ object SHOULD be ignored.
////

=== The +items+ Element
The +item+ element contains one or more data items that represent the state of the requested resource. The +items+ collection is an array of anonymous JSON arbitrary objects. The +items+ collection SHOULD contain a homogeneous JSON objects (e.g. all +customer+ objects) but MAY contain a heterogeneous collection of objects. 

Each +item+ object SHOULD have +id+, +type+, and +schema+ properties and MAY have any number of additional properties. The data for an +item+ MAY be a set of properties at the "top" level or MAY be nested within a single named code (e.g. +graph+ or +data+, etc. Each +item+ object is essentially a graph arbitrary depth and complexity. The +schema+ property of an +item+ SHOULD provide enough information to allow message-handlers to properly parse the +item+.

.Sample +item+ object
----
{
  "id" : "",
  "type" : "",
  "schema" : "",
  "links" : [...]
  ...
}
----

The +schema+ property SHOULD point to a JSON-Schema (<<json-schema, JSON-SCHEMA>>) document but MAY point to some other document.

An +item+ object MAY also include a single +links+ collection. This +links+ collection follows the same rules as the top-level +links+ collection (see above). 

////
+method+ ::
  The HTTP method the client SHOULD use when the service request. Any valid HTTP method is allowed. This is a REQUIRED element. If the value is empty or is not understood by the client, the value MUST be treated as an HTTP GET.
+properties+ ::
  An array of one or more anonymous +property+ objects (see <<property-object, +property+>>) that each describe a parameter for the associated state transition. This is an OPTIONAL element. If the array is missing or empty, the +properties+ collection MUST be treated as an empty set of parameters -- meaning that the transition is meant to be executed without passing any parameters.
+property+ ::
  A JSON object that describes a state transition parameter. A +property+ object has the following elements:
  +
  * +name+ : The parameter name. This is a valid JSON string. This is a REQUIRED element. If this attribute is missing or set to empty, the client SHOULD ignore this +property+ object completely.
  * +readOnly+ : Indicates whether the parameter is read-only. This is a valid JSON boolean. This is an OPTIONAL element. If this element is missing, empty, or set to an unrecognized value, it SHOULD be treated as if the value of +readOnly+ is set to `false'. 
  * +regex+ : A regular expression string to be applied to the value of the parameter. Rules for valid values are the same as the HTML5 pattern attribute <<html5pat,[HTML5PAT]>>. This is an OPTIONAL element. If this attribute missing, is set to empty, or is unparseable , it SHOULD be ignored.
  * +required+ : Indicates whether the parameter is required. This is a valid JSON boolean. This is an OPTIONAL element. If this attribute is missing, set to blank or contains an unrecognized value, it SHOULD be treated as if the value of +required+ is set to `false'.
  * +value+ : The parameter value. This is a valid JSON string. This string MAY contain a URI Template (see +templated+ for details). This is an OPTIONAL element. If it does not exist, clients SHOULD act as if the +value+ property is set to an empty string.

+title+:: A human-readable string that can be used to identify this template. This is a valid JSON string. This is an OPTIONAL element. If it does not exist or is unparsable, consumers MAY use the +key+ value of the template as the value for +title+.
////

== PRAG-JSON Properties
Below is a list of valid *PRAG-JSON* properties defined in this specification. These properties MAY appear in more than one place within a valid *PRAG-JSON* message. 

+enctype+:: TK
+href+:: TK
+id+:: TK
+method+:: TK
+name+:: TK
+pattern+:: TK
+properties+:: TK
+readonly+:: TK
+required+:: TK
+rel+:: TK
+schema+:: TK
+tags+:: TK
+title+:: TK
+type+:: TK
+value+:: TK

== The PRAG-JSON Media Type Identifier String
The media type identifier string for *PRAG-JSON* documents is: +application/vnd.prag+json+  This SHOULD be used as part of the HTTP +accept+ header when making a request for a *PRAG-JSON* document. It SHOULD appear as the HTTP +content-type+ header when sending a response that contains a *PRAG-JSON* document. 
 
== Extending the PRAG-JSON Document
Authors can extend the *PRAG-JSON* media type as long as the following rules are observed:

 . No existing properties or objects are removed.
 . No existing properties or objects or the list of valid values are altered in a way that is non-backward compatible (e.g. changes MUST NOT break existing implementations that adhere to this specification).
 . All new properties or objects are treated as OPTIONAL (e.g. no new REQUIRED elements are introduced in an extension).
 
[WARNING]
==== 
Authors should be aware that a future version of this specification MAY add new elements and should take care that any extensions are implemented in a way that reduces the likelihood that a future version of this specification is in conflict with your extension.
====

== References
 * [[dabgwa]] [DABGWA] Mike Amundsen, "Design and Build Great Web APIs", 2020, https://pragprog.com/book/maapis/design-and-build-great-web-apis 
 * [[kay2003]] [KAY2003] Dr. Alan Kay, "Clarification of "object-oriented", July 2003 (email), http://www.purl.org/stefan_ram/pub/doc_kay_oop_en 
 * [[repo]] [REPO] Github, "PRAG-JSON", https://github.com/mamund/prag-json
 * [[rfc2119]] [RFC2119] S. Bradner, "Key words for use in RFCs to Indicate Requirement Levels", March 1997, http://tools.ietf.org/html/rfc2119
 * [[rfc7159]] [RFC7159] Tim Bray, "The JavaScript Object Notation (JSON) Data Interchange Format", March 2014, https://tools.ietf.org/html/rfc7159
 * [[html5]] [HTML5] HTML Living Standard, https://html.spec.whatwg.org/multipage/
 * [[html5-tag]] [HTML5-TAG] Ian Hickson, Ed., "HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110809/the-meta-element.html
 * [[html5-link]] [HTML5-LINK] Ian HIckson, Ed., "HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110705/spec.html#the-link-element
 * [[html5-a]] [HTML5-A] Ian Hickson, Ed., "HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110705/spec.html#the-a-element
 * [[html5-form]] [HTML5-FORM] Ian Hickson, Ed., "HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110705/spec.html#the-form-element
 * [[html5-input]] [HTML5-INPUT] Ian Hickson, Ed., "HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110705/spec.html#the-input-element
 * [[html5-pat]] [HTML5-PAT] Ian Hickson, Ed. et al, HTML5: Edition for Web Authors", 2011, https://www.w3.org/TR/2011/WD-html5-author-20110705/spec.html#the-pattern-attribute 
 * [[json-schema]] [JSON-SCHEMA] "JSON Schema Specification", September 2019, https://json-schema.org/specification.html
 
////
 * [[html5mut]] [HTML5MUT] Hickson, I., Ed. et al, "HTML5 (Mutate Action URL)", October 2014, http://www.w3.org/TR/html5/forms.html#submit-mutate-action
 * [[html5enc]] [HTML5ENC] Hickson, I., Ed. et al, "HTML5 (Encoding Algorithm)", October 2014, http://www.w3.org/TR/html5/forms.html#application/x-www-form-urlencoded-encoding-algorithm
////
 
== Acknowledgements
I thank the everyone who helped contribute to this specification. 

